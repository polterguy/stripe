
/*
 * Stripe integration allowing users to purchase a subscription type of product.
 */
.arguments
   card_number:string
   card_exp_month:string
   card_exp_year:string
   card_cvs:string
.description:Creates a new payment method and associates with the currently authenticated user

// Sanity checking invocation.
auth.ticket.verify:root, admin, guest

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/card_number
validators.mandatory:x:@.arguments/*/card_exp_month
validators.mandatory:x:@.arguments/*/card_exp_year
validators.mandatory:x:@.arguments/*/card_cvs

// Retrieving username that we'll need to create/extract customer from our internal systems.
auth.ticket.get

/*
 * Opening up a database connection to our stripe database, since we want to store
 * values associating the username with stripe internal data as we proceed.
 */
data.connect:stripe

   // Will contain customer-id reference from Stripe's systems.
   .customer-id
   data.read
      table:customers
      values
         customer_id
      where
         and
            username.eq:x:@auth.ticket.get

   /*
    * Checking if we have previously create a customer object, and if not,
    * we create a new customer object.
    */
   if
      not
         exists:x:@data.read/*/*
      .lambda

         /*
          * Retrieving user's name and email address which we'll need to create our
          * customer in Stripe's system.
          */
         .email
         .name
         data.connect:magic
            data.read
               table:users_extra
               values
                  type
                  name
               where
                  and
                     user.eq:x:@auth.ticket.get
                     or
                        type.eq:email
                        type.eq:name
            set-value:x:@.email
               get-value:x:@data.read/*/*/type/=email/./*/value
            set-value:x:@.name
               get-value:x:@data.read/*/*/type/=name/./*/value

         // We need to create a customer object.
         unwrap:x:+/*
         signal:stripe.customers.create
            username:x:@auth.ticket.get
            name:x:@.name
            email:x:@.email

         // Inserting our customer object
         data.create
            table:customers
            values
               username:x:@auth.ticket.get
               customer_id:x:@signal

         // Setting customer id.
         set-value:x:@.customer-id
            get-value:x:@signal

   else

      // We already have a customer, storing for logic further down.
      set-value:x:@.customer-id
         get-value:x:@data.read/*/*/customer_id

   // Creating a new payment-method in Stripe's systems and storing a reference to it.
   .payment-method
   .brand
   unwrap:x:+/*
   signal:strips.payment_methods.create
      card_number:x:@.arguments/*/card_number
      card_exp_month:x:@.arguments/*/card_exp_month
      card_exp_year:x:@.arguments/*/card_exp_year
      card_cvs:x:@.arguments/*/card_cvs

   /*
    * Making sure we can store the payment method and brand later and
    * associate with our internal records.
    */
   set-value:x:@.payment-method
      get-value:x:@signal/*/id
   set-value:x:@.brand
      get-value:x:@signal/*/brand

   // Attaching payment method with customer in Stripe.
   unwrap:x:+/*
   signal:strips.payment_methods.attach
      payment_method:x:@.payment-method
      customer_id:x:@.customer-id

   // Creating our internal database record.
   strings.length:x:@.arguments/*/card_number
   math.subtract:x:-
      .:int:4
   strings.substring:x:@.arguments/*/card_number
      get-value:x:@math.subtract
      .:int:4
   data.create
      table:payment_methods
      values
         payment_method:x:@.payment-method
         username:x:@auth.ticket.get
         card_no:x:@strings.substring
         card_type:x:@.brand

   // Returning 4 last digits of card, brand of card, and payment method ID to caller.
   unwrap:x:+/*
   return
      payment-method:x:@.payment-method
      brand:x:@.brand
      card_no:x:@strings.substring

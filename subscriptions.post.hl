
/*
 * Stripe integration allowing users to purchase a subscription type of product.
 */

.arguments
   price:string
   payment_method:string
.description:Creates a new subscription and associates with the currently authenticated user

// Sanity checking invocation.
auth.ticket.verify:root, admin, guest

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/price
validators.mandatory:x:@.arguments/*/payment_method

// Retrieving username that we'll need to extract name and email.
auth.ticket.get

/*
 * Opening up a database connection to our stripe database, since we want to store
 * values associating the username with stripe internal data as we proceed.
 */
data.connect:stripe

   // Will contain customer-id and payment method reference in Stripe's systems.
   .customer-id
   data.read
      table:customers
      values
         customer_id
      where
         and
            username.eq:x:@auth.ticket.get

   // Verifying we've previously created a customer, and/or payment method
   if
      not
         exists:x:@data.read/*/*
      .lambda

         // Customer has not previously been created.
         log.error:Tried to create subscription before creating a customer or payment method
            username:x:@auth.user.get
         throw:No payment method, and/or customer created
            public:true
            status:401

   // Setting customer id and payment method.
   set-value:x:@.customer-id
      get-value:x:@data.read/*/*/customer_id

   /*
    * Now we have a customer, a payment method, and the customer and its payment method
    * are associated with each other internally in our database, and in Stripe's systems.
    *
    * Hence, now we can create our subscription.
    */
   unwrap:x:+/*
   signal:stripe.subscriptions.create
      customer_id:x:@.customer-id
      payment_method:x:@.arguments/*/payment_method
      price:x:@.arguments/*/price

   // Creating our subscription and storing it in our database.
   data.connect:stripe
      data.create
         table:subscriptions
         values
            username:x:@auth.ticket.get
            subscription:x:@signal/*/id
            price:x:@.arguments/*/price
            product:x:@signal/*/product

   // Returning success to caller.
   unwrap:x:+/*
   return
      subscription:x:@signal/*/id

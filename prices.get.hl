
/*
 * Returns the price information from Stripe given the specified product ID.
 */
.arguments
   price:string
.description:"Returns the specified price as returned from Stripe's API"

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/price

/*
 * Applying some fairly aggressive server side cache here to avoid
 * having to invoke Stripe's API every time somebody requests product
 * information.
 */
strings.concat
   .:stripe.prices.cache.
   get-value:x:@.arguments/*/price
unwrap:x:+/*/.lambda/*/.price
cache.try-get:x:@strings.concat
   expiration:6000
   .lambda

      // Forward evaluated further up.
      .price:x:@.arguments/*/price

      // Retrieving token to use for invocations towards Stripe.
      .token
      set-value:x:-
         strings.concat
            .:"Bearer "
            config.get:"magic:stripe:token"

      // Retrieving product information from Stripe.
      strings.concat
         .:"https://api.stripe.com/v1/prices/"
         get-value:x:@.price
      http.get:x:-
         convert:true
         headers
            Authorization:x:@.token

      // Sanity checking above invocation.
      if
         mte
            get-value:x:@http.get
            .:int:400
         .lambda

            // Oops, something went wrong ...!!
            lambda2hyper:x:@http.post
            log.error:Something went wrong while invoking Stripe API
               result:x:@lambda2hyper
               provider:Stripe
            throw:"We could not successfully retrieve that price from Stripe's systems"
               public:true
               status:500

      // Returning Stripe information to caller.
      unwrap:x:+/*
      lambda2hyper
         currency:x:@http.get/*/content/*/currency
         product:x:@http.get/*/content/*/product
         interval:x:@http.get/*/content/*/recurring/*/interval
         tax_behaviour:x:@http.get/*/content/*/tax_behavior
         amount:x:@http.get/*/content/*/unit_amount
      return:x:-

// Making sure we apply aggressive HTTP cache control
response.headers.set
   Cache-Control: public, max-age=6000

// Returning product to caller.
hyper2lambda:x:@cache.try-get
return-nodes:x:-/*